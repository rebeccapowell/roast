// <auto-generated />
using System;
using CoffeeTalk.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoffeeTalk.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CoffeeTalkDbContext))]
    partial class CoffeeTalkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.BrewCycleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrewSessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("RevealedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrewSessionId");

                    b.HasIndex("IngredientId");

                    b.ToTable("brew_cycles", (string)null);
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.BrewSessionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoffeeBarId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeBarId");

                    b.ToTable("brew_sessions", (string)null);
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.CoffeeBarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int>("DefaultMaxIngredientsPerHipster")
                        .HasColumnType("integer");

                    b.Property<int>("SubmissionPolicy")
                        .HasColumnType("integer");

                    b.Property<bool>("SubmissionsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("coffee_bars", (string)null);
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.HipsterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoffeeBarId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxIngredientQuota")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeBarId", "NormalizedUsername")
                        .IsUnique();

                    b.ToTable("hipsters", (string)null);
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.IngredientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoffeeBarId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsConsumed")
                        .HasColumnType("boolean");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeBarId");

                    b.ToTable("ingredients", (string)null);
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.SubmissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoffeeBarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HipsterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HipsterId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("CoffeeBarId", "IngredientId", "HipsterId")
                        .IsUnique();

                    b.ToTable("submissions", (string)null);
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.VoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrewCycleId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CastAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TargetHipsterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VoterHipsterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VoterHipsterId");

                    b.HasIndex("BrewCycleId", "VoterHipsterId")
                        .IsUnique();

                    b.ToTable("votes", (string)null);
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.BrewCycleEntity", b =>
                {
                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.BrewSessionEntity", "BrewSession")
                        .WithMany("Cycles")
                        .HasForeignKey("BrewSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.IngredientEntity", "Ingredient")
                        .WithMany("BrewCycles")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BrewSession");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.BrewSessionEntity", b =>
                {
                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.CoffeeBarEntity", "CoffeeBar")
                        .WithMany("Sessions")
                        .HasForeignKey("CoffeeBarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeBar");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.HipsterEntity", b =>
                {
                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.CoffeeBarEntity", "CoffeeBar")
                        .WithMany("Hipsters")
                        .HasForeignKey("CoffeeBarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeBar");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.IngredientEntity", b =>
                {
                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.CoffeeBarEntity", "CoffeeBar")
                        .WithMany("Ingredients")
                        .HasForeignKey("CoffeeBarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeBar");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.SubmissionEntity", b =>
                {
                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.CoffeeBarEntity", "CoffeeBar")
                        .WithMany("Submissions")
                        .HasForeignKey("CoffeeBarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.HipsterEntity", "Hipster")
                        .WithMany("Submissions")
                        .HasForeignKey("HipsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.IngredientEntity", "Ingredient")
                        .WithMany("Submissions")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeBar");

                    b.Navigation("Hipster");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.VoteEntity", b =>
                {
                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.BrewCycleEntity", "BrewCycle")
                        .WithMany("Votes")
                        .HasForeignKey("BrewCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeTalk.Infrastructure.Data.Entities.HipsterEntity", "Voter")
                        .WithMany("Votes")
                        .HasForeignKey("VoterHipsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrewCycle");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.BrewCycleEntity", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.BrewSessionEntity", b =>
                {
                    b.Navigation("Cycles");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.CoffeeBarEntity", b =>
                {
                    b.Navigation("Hipsters");

                    b.Navigation("Ingredients");

                    b.Navigation("Sessions");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.HipsterEntity", b =>
                {
                    b.Navigation("Submissions");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("CoffeeTalk.Infrastructure.Data.Entities.IngredientEntity", b =>
                {
                    b.Navigation("BrewCycles");

                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
